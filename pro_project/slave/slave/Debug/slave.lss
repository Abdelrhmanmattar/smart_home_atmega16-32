
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000063e  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800076  00800076  000006e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddf  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  0000164b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084b  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000482  00000000  00000000  00002e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
#include "std_macros.h"
#include "ADC.h"
void ADC_vinit(int8_t mux)
{
	//configure VREF
	SET_BIT(ADMUX,REFS0);
  92:	97 b1       	in	r25, 0x07	; 7
  94:	90 64       	ori	r25, 0x40	; 64
  96:	97 b9       	out	0x07, r25	; 7
	//SET_BIT(ADMUX,REFS1);
	//enable ADC
	SET_BIT(ADCSRA,ADEN);
  98:	96 b1       	in	r25, 0x06	; 6
  9a:	90 68       	ori	r25, 0x80	; 128
  9c:	96 b9       	out	0x06, r25	; 6
	mux=mux | 0b11100000;
  9e:	80 6e       	ori	r24, 0xE0	; 224
	//set mux mode
	ADMUX |= 0b00011111;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	9f 61       	ori	r25, 0x1F	; 31
  a4:	97 b9       	out	0x07, r25	; 7
	ADMUX =ADMUX&mux;
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	89 23       	and	r24, r25
  aa:	87 b9       	out	0x07, r24	; 7
	
	// SET Prescaler
	SET_BIT(ADCSRA,ADPS1);
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_u16Read>:


unsigned short ADC_u16Read(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA,ADSC);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
	while(READ_BIT(ADCSRA,ADSC));
  c0:	36 99       	sbic	0x06, 6	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_u16Read+0x6>
	read_val=(ADCL);
  c4:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	98 2f       	mov	r25, r24
  cc:	88 27       	eor	r24, r24
	return read_val ;
  ce:	82 2b       	or	r24, r18
  d0:	08 95       	ret

000000d2 <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
  d2:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
  d4:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
  d6:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
  d8:	8c b3       	in	r24, 0x1c	; 28
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8c bb       	out	0x1c, r24	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
  de:	8c b3       	in	r24, 0x1c	; 28
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8c bb       	out	0x1c, r24	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
  e4:	e1 99       	sbic	0x1c, 1	; 28
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <EEPROM_write+0x12>
	
}
  e8:	08 95       	ret

000000ea <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
  ea:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
  ec:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
  ee:	8c b3       	in	r24, 0x1c	; 28
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	8c bb       	out	0x1c, r24	; 28
	/*return data from data register*/
	return EEDR ;
  f4:	8d b3       	in	r24, 0x1d	; 29
  f6:	08 95       	ret

000000f8 <con_on>:
	SET_BIT(TCCR1B,CS11);
}

void change(int x)
{
	ICR1=x;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
  fe:	08 95       	ret

00000100 <con_off>:
 100:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 104:	82 b3       	in	r24, 0x12	; 18
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	82 bb       	out	0x12, r24	; 18
 10a:	08 95       	ret

0000010c <tv_on>:
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	82 bb       	out	0x12, r24	; 18
 112:	08 95       	ret

00000114 <tv_off>:
 114:	82 b3       	in	r24, 0x12	; 18
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	82 bb       	out	0x12, r24	; 18
 11a:	08 95       	ret

0000011c <set_room>:
 11c:	82 31       	cpi	r24, 0x12	; 18
 11e:	70 f4       	brcc	.+28     	; 0x13c <set_room+0x20>
 120:	8a 50       	subi	r24, 0x0A	; 10
 122:	48 b3       	in	r20, 0x18	; 24
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <set_room+0x14>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <set_room+0x10>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	88 bb       	out	0x18, r24	; 24
 13a:	08 95       	ret
 13c:	8a 31       	cpi	r24, 0x1A	; 26
 13e:	70 f4       	brcc	.+28     	; 0x15c <set_room+0x40>
 140:	82 51       	subi	r24, 0x12	; 18
 142:	48 b3       	in	r20, 0x18	; 24
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <set_room+0x34>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <set_room+0x30>
 154:	cb 01       	movw	r24, r22
 156:	80 95       	com	r24
 158:	84 23       	and	r24, r20
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	08 95       	ret

0000015e <set_temp>:
 15e:	0e 94 94 01 	call	0x328	; 0x328 <UART_RECIEVE8>
 162:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	68 2f       	mov	r22, r24
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_write>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	81 ee       	ldi	r24, 0xE1	; 225
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <set_temp+0x18>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <set_temp+0x22>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <servo_int>:
 184:	8e b5       	in	r24, 0x2e	; 46
 186:	88 60       	ori	r24, 0x08	; 8
 188:	8e bd       	out	0x2e, r24	; 46
 18a:	8e b5       	in	r24, 0x2e	; 46
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	8e bd       	out	0x2e, r24	; 46
 190:	8e b5       	in	r24, 0x2e	; 46
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	8e bd       	out	0x2e, r24	; 46
 196:	84 ef       	ldi	r24, 0xF4	; 244
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	9b bd       	out	0x2b, r25	; 43
 19c:	8a bd       	out	0x2a, r24	; 42
 19e:	99 bd       	out	0x29, r25	; 41
 1a0:	88 bd       	out	0x28, r24	; 40
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	97 bd       	out	0x27, r25	; 39
 1a8:	86 bd       	out	0x26, r24	; 38
 1aa:	8f b5       	in	r24, 0x2f	; 47
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	8f bd       	out	0x2f, r24	; 47
 1b0:	8f b5       	in	r24, 0x2f	; 47
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bd       	out	0x2f, r24	; 47
 1b6:	8f b5       	in	r24, 0x2f	; 47
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8f bd       	out	0x2f, r24	; 47
 1bc:	08 95       	ret

000001be <servo_speed_OCR1A>:
 1be:	28 e4       	ldi	r18, 0x48	; 72
 1c0:	31 ee       	ldi	r19, 0xE1	; 225
 1c2:	48 e2       	ldi	r20, 0x28	; 40
 1c4:	51 e4       	ldi	r21, 0x41	; 65
 1c6:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	4a ef       	ldi	r20, 0xFA	; 250
 1d0:	53 e4       	ldi	r21, 0x43	; 67
 1d2:	0e 94 a2 01 	call	0x344	; 0x344 <__addsf3>
 1d6:	0e 94 0e 02 	call	0x41c	; 0x41c <__fixunssfsi>
 1da:	7b bd       	out	0x2b, r23	; 43
 1dc:	6a bd       	out	0x2a, r22	; 42
 1de:	8e b5       	in	r24, 0x2e	; 46
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	8e bd       	out	0x2e, r24	; 46
 1e4:	08 95       	ret

000001e6 <door_on>:
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	84 eb       	ldi	r24, 0xB4	; 180
 1ec:	92 e4       	ldi	r25, 0x42	; 66
 1ee:	0e 94 df 00 	call	0x1be	; 0x1be <servo_speed_OCR1A>
 1f2:	08 95       	ret

000001f4 <door_off>:
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	cb 01       	movw	r24, r22
 1fa:	0e 94 df 00 	call	0x1be	; 0x1be <servo_speed_OCR1A>
 1fe:	08 95       	ret

00000200 <servo_speed_OCR1B>:
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e3       	ldi	r20, 0x30	; 48
 206:	51 e4       	ldi	r21, 0x41	; 65
 208:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	4a ef       	ldi	r20, 0xFA	; 250
 212:	53 e4       	ldi	r21, 0x43	; 67
 214:	0e 94 a2 01 	call	0x344	; 0x344 <__addsf3>
 218:	0e 94 0e 02 	call	0x41c	; 0x41c <__fixunssfsi>
 21c:	79 bd       	out	0x29, r23	; 41
 21e:	68 bd       	out	0x28, r22	; 40
 220:	8e b5       	in	r24, 0x2e	; 46
 222:	82 60       	ori	r24, 0x02	; 2
 224:	8e bd       	out	0x2e, r24	; 46
 226:	08 95       	ret

00000228 <gar_on>:
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	84 eb       	ldi	r24, 0xB4	; 180
 22e:	92 e4       	ldi	r25, 0x42	; 66
 230:	0e 94 00 01 	call	0x200	; 0x200 <servo_speed_OCR1B>
 234:	08 95       	ret

00000236 <gar_off>:
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	cb 01       	movw	r24, r22
 23c:	0e 94 00 01 	call	0x200	; 0x200 <servo_speed_OCR1B>
 240:	08 95       	ret

00000242 <main>:
#include "uart_messages.h"
bool condition_on=false;
uint8_t temp=25;

int main(void)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	64 97       	sbiw	r28, 0x14	; 20
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
	temp=EEPROM_read(0x100);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 75 00 	call	0xea	; 0xea <EEPROM_read>
 25e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	DDRB=0XFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	87 bb       	out	0x17, r24	; 23
	DDRD|=0B00111100;
 266:	81 b3       	in	r24, 0x11	; 17
 268:	8c 63       	ori	r24, 0x3C	; 60
 26a:	81 bb       	out	0x11, r24	; 17
	
	ADC_vinit(0);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	UART_Vinit(9600);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	95 e2       	ldi	r25, 0x25	; 37
 276:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_Vinit>
	servo_int();
 27a:	0e 94 c2 00 	call	0x184	; 0x184 <servo_int>
	
	char x;	
	
	void (*ptr[10])(uint8_t)={set_temp,con_on,con_off,door_on,door_off,gar_on,gar_off,tv_on,tv_off,set_room};
 27e:	84 e1       	ldi	r24, 0x14	; 20
 280:	e1 e6       	ldi	r30, 0x61	; 97
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	de 01       	movw	r26, r28
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	8a 95       	dec	r24
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x46>

    /* Replace with your application code */
    while (1) 
    {
		if (condition_on && (ADC_u16Read()>>1)>temp)
 290:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 294:	88 23       	and	r24, r24
 296:	71 f0       	breq	.+28     	; 0x2b4 <main+0x72>
 298:	0e 94 5d 00 	call	0xba	; 0xba <ADC_u16Read>
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	28 17       	cp	r18, r24
 2a8:	39 07       	cpc	r19, r25
 2aa:	20 f4       	brcc	.+8      	; 0x2b4 <main+0x72>
			SET_BIT(PORTD,3);
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <main+0x78>
		else
			CLR_BIT(PORTD,3);
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	82 bb       	out	0x12, r24	; 18

		x=UART_RECIEVE8();
 2ba:	0e 94 94 01 	call	0x328	; 0x328 <UART_RECIEVE8>
		if (x>0 && x<10)
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	98 0f       	add	r25, r24
 2c2:	99 30       	cpi	r25, 0x09	; 9
 2c4:	80 f4       	brcc	.+32     	; 0x2e6 <main+0xa4>
			ptr[x-1](x);
 2c6:	e8 2f       	mov	r30, r24
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	2c 0f       	add	r18, r28
 2d6:	3d 1f       	adc	r19, r29
 2d8:	e2 0f       	add	r30, r18
 2da:	f3 1f       	adc	r31, r19
 2dc:	01 90       	ld	r0, Z+
 2de:	f0 81       	ld	r31, Z
 2e0:	e0 2d       	mov	r30, r0
 2e2:	09 95       	icall
 2e4:	d5 cf       	rjmp	.-86     	; 0x290 <main+0x4e>
		else if (x>=10 && x<=25)
 2e6:	96 ef       	ldi	r25, 0xF6	; 246
 2e8:	98 0f       	add	r25, r24
 2ea:	90 31       	cpi	r25, 0x10	; 16
 2ec:	88 f6       	brcc	.-94     	; 0x290 <main+0x4e>
			ptr[9](x);
 2ee:	eb 89       	ldd	r30, Y+19	; 0x13
 2f0:	fc 89       	ldd	r31, Y+20	; 0x14
 2f2:	09 95       	icall
 2f4:	cd cf       	rjmp	.-102    	; 0x290 <main+0x4e>

000002f6 <UART_Vinit>:
	{
		UART_SEND_CHAR(*DATA);
		DATA++;
		_delay_ms(50);
	}
}
 2f6:	9c 01       	movw	r18, r24
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	60 e2       	ldi	r22, 0x20	; 32
 2fe:	71 ea       	ldi	r23, 0xA1	; 161
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__udivmodsi4>
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	31 09       	sbc	r19, r1
 30c:	30 bd       	out	0x20, r19	; 32
 30e:	29 b9       	out	0x09, r18	; 9
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	80 61       	ori	r24, 0x10	; 16
 314:	8a b9       	out	0x0a, r24	; 10
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	88 60       	ori	r24, 0x08	; 8
 31a:	8a b9       	out	0x0a, r24	; 10
 31c:	8a b1       	in	r24, 0x0a	; 10
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8a b9       	out	0x0a, r24	; 10
 322:	86 e8       	ldi	r24, 0x86	; 134
 324:	80 bd       	out	0x20, r24	; 32
 326:	08 95       	ret

00000328 <UART_RECIEVE8>:


char UART_RECIEVE8()
{	
	uint16_t wait=20000;
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	9e e4       	ldi	r25, 0x4E	; 78
	while( READ_BIT(UCSRA ,RXC) ==0)
 32c:	04 c0       	rjmp	.+8      	; 0x336 <UART_RECIEVE8+0xe>
	{
		if (wait <=1)return 0;
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	28 f0       	brcs	.+10     	; 0x33e <UART_RECIEVE8+0x16>
		wait--;
 334:	01 97       	sbiw	r24, 0x01	; 1


char UART_RECIEVE8()
{	
	uint16_t wait=20000;
	while( READ_BIT(UCSRA ,RXC) ==0)
 336:	5f 9b       	sbis	0x0b, 7	; 11
 338:	fa cf       	rjmp	.-12     	; 0x32e <UART_RECIEVE8+0x6>
	{
		if (wait <=1)return 0;
		wait--;
	}
	return (char)UDR;
 33a:	8c b1       	in	r24, 0x0c	; 12
 33c:	08 95       	ret
char UART_RECIEVE8()
{	
	uint16_t wait=20000;
	while( READ_BIT(UCSRA ,RXC) ==0)
	{
		if (wait <=1)return 0;
 33e:	80 e0       	ldi	r24, 0x00	; 0
		wait--;
	}
	return (char)UDR;
}
 340:	08 95       	ret

00000342 <__subsf3>:
 342:	50 58       	subi	r21, 0x80	; 128

00000344 <__addsf3>:
 344:	bb 27       	eor	r27, r27
 346:	aa 27       	eor	r26, r26
 348:	0e 94 b9 01 	call	0x372	; 0x372 <__addsf3x>
 34c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_round>
 350:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_pscA>
 354:	38 f0       	brcs	.+14     	; 0x364 <__addsf3+0x20>
 356:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_pscB>
 35a:	20 f0       	brcs	.+8      	; 0x364 <__addsf3+0x20>
 35c:	39 f4       	brne	.+14     	; 0x36c <__addsf3+0x28>
 35e:	9f 3f       	cpi	r25, 0xFF	; 255
 360:	19 f4       	brne	.+6      	; 0x368 <__addsf3+0x24>
 362:	26 f4       	brtc	.+8      	; 0x36c <__addsf3+0x28>
 364:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_nan>
 368:	0e f4       	brtc	.+2      	; 0x36c <__addsf3+0x28>
 36a:	e0 95       	com	r30
 36c:	e7 fb       	bst	r30, 7
 36e:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_inf>

00000372 <__addsf3x>:
 372:	e9 2f       	mov	r30, r25
 374:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_split3>
 378:	58 f3       	brcs	.-42     	; 0x350 <__addsf3+0xc>
 37a:	ba 17       	cp	r27, r26
 37c:	62 07       	cpc	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	95 07       	cpc	r25, r21
 384:	20 f0       	brcs	.+8      	; 0x38e <__addsf3x+0x1c>
 386:	79 f4       	brne	.+30     	; 0x3a6 <__addsf3x+0x34>
 388:	a6 f5       	brtc	.+104    	; 0x3f2 <__addsf3x+0x80>
 38a:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_zero>
 38e:	0e f4       	brtc	.+2      	; 0x392 <__addsf3x+0x20>
 390:	e0 95       	com	r30
 392:	0b 2e       	mov	r0, r27
 394:	ba 2f       	mov	r27, r26
 396:	a0 2d       	mov	r26, r0
 398:	0b 01       	movw	r0, r22
 39a:	b9 01       	movw	r22, r18
 39c:	90 01       	movw	r18, r0
 39e:	0c 01       	movw	r0, r24
 3a0:	ca 01       	movw	r24, r20
 3a2:	a0 01       	movw	r20, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	ff 27       	eor	r31, r31
 3a8:	59 1b       	sub	r21, r25
 3aa:	99 f0       	breq	.+38     	; 0x3d2 <__addsf3x+0x60>
 3ac:	59 3f       	cpi	r21, 0xF9	; 249
 3ae:	50 f4       	brcc	.+20     	; 0x3c4 <__addsf3x+0x52>
 3b0:	50 3e       	cpi	r21, 0xE0	; 224
 3b2:	68 f1       	brcs	.+90     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3b4:	1a 16       	cp	r1, r26
 3b6:	f0 40       	sbci	r31, 0x00	; 0
 3b8:	a2 2f       	mov	r26, r18
 3ba:	23 2f       	mov	r18, r19
 3bc:	34 2f       	mov	r19, r20
 3be:	44 27       	eor	r20, r20
 3c0:	58 5f       	subi	r21, 0xF8	; 248
 3c2:	f3 cf       	rjmp	.-26     	; 0x3aa <__addsf3x+0x38>
 3c4:	46 95       	lsr	r20
 3c6:	37 95       	ror	r19
 3c8:	27 95       	ror	r18
 3ca:	a7 95       	ror	r26
 3cc:	f0 40       	sbci	r31, 0x00	; 0
 3ce:	53 95       	inc	r21
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <__addsf3x+0x52>
 3d2:	7e f4       	brtc	.+30     	; 0x3f2 <__addsf3x+0x80>
 3d4:	1f 16       	cp	r1, r31
 3d6:	ba 0b       	sbc	r27, r26
 3d8:	62 0b       	sbc	r22, r18
 3da:	73 0b       	sbc	r23, r19
 3dc:	84 0b       	sbc	r24, r20
 3de:	ba f0       	brmi	.+46     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3e0:	91 50       	subi	r25, 0x01	; 1
 3e2:	a1 f0       	breq	.+40     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3e4:	ff 0f       	add	r31, r31
 3e6:	bb 1f       	adc	r27, r27
 3e8:	66 1f       	adc	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	88 1f       	adc	r24, r24
 3ee:	c2 f7       	brpl	.-16     	; 0x3e0 <__addsf3x+0x6e>
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3f2:	ba 0f       	add	r27, r26
 3f4:	62 1f       	adc	r22, r18
 3f6:	73 1f       	adc	r23, r19
 3f8:	84 1f       	adc	r24, r20
 3fa:	48 f4       	brcc	.+18     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3fc:	87 95       	ror	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f7 95       	ror	r31
 406:	9e 3f       	cpi	r25, 0xFE	; 254
 408:	08 f0       	brcs	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 40a:	b0 cf       	rjmp	.-160    	; 0x36c <__addsf3+0x28>
 40c:	93 95       	inc	r25
 40e:	88 0f       	add	r24, r24
 410:	08 f0       	brcs	.+2      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 412:	99 27       	eor	r25, r25
 414:	ee 0f       	add	r30, r30
 416:	97 95       	ror	r25
 418:	87 95       	ror	r24
 41a:	08 95       	ret

0000041c <__fixunssfsi>:
 41c:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_splitA>
 420:	88 f0       	brcs	.+34     	; 0x444 <__fixunssfsi+0x28>
 422:	9f 57       	subi	r25, 0x7F	; 127
 424:	98 f0       	brcs	.+38     	; 0x44c <__fixunssfsi+0x30>
 426:	b9 2f       	mov	r27, r25
 428:	99 27       	eor	r25, r25
 42a:	b7 51       	subi	r27, 0x17	; 23
 42c:	b0 f0       	brcs	.+44     	; 0x45a <__fixunssfsi+0x3e>
 42e:	e1 f0       	breq	.+56     	; 0x468 <__stack+0x9>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	1a f0       	brmi	.+6      	; 0x440 <__fixunssfsi+0x24>
 43a:	ba 95       	dec	r27
 43c:	c9 f7       	brne	.-14     	; 0x430 <__fixunssfsi+0x14>
 43e:	14 c0       	rjmp	.+40     	; 0x468 <__stack+0x9>
 440:	b1 30       	cpi	r27, 0x01	; 1
 442:	91 f0       	breq	.+36     	; 0x468 <__stack+0x9>
 444:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_zero>
 448:	b1 e0       	ldi	r27, 0x01	; 1
 44a:	08 95       	ret
 44c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_zero>
 450:	67 2f       	mov	r22, r23
 452:	78 2f       	mov	r23, r24
 454:	88 27       	eor	r24, r24
 456:	b8 5f       	subi	r27, 0xF8	; 248
 458:	39 f0       	breq	.+14     	; 0x468 <__stack+0x9>
 45a:	b9 3f       	cpi	r27, 0xF9	; 249
 45c:	cc f3       	brlt	.-14     	; 0x450 <__fixunssfsi+0x34>
 45e:	86 95       	lsr	r24
 460:	77 95       	ror	r23
 462:	67 95       	ror	r22
 464:	b3 95       	inc	r27
 466:	d9 f7       	brne	.-10     	; 0x45e <__fixunssfsi+0x42>
 468:	3e f4       	brtc	.+14     	; 0x478 <__stack+0x19>
 46a:	90 95       	com	r25
 46c:	80 95       	com	r24
 46e:	70 95       	com	r23
 470:	61 95       	neg	r22
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__fp_inf>:
 47a:	97 f9       	bld	r25, 7
 47c:	9f 67       	ori	r25, 0x7F	; 127
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	08 95       	ret

00000486 <__fp_nan>:
 486:	9f ef       	ldi	r25, 0xFF	; 255
 488:	80 ec       	ldi	r24, 0xC0	; 192
 48a:	08 95       	ret

0000048c <__fp_pscA>:
 48c:	00 24       	eor	r0, r0
 48e:	0a 94       	dec	r0
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	18 06       	cpc	r1, r24
 496:	09 06       	cpc	r0, r25
 498:	08 95       	ret

0000049a <__fp_pscB>:
 49a:	00 24       	eor	r0, r0
 49c:	0a 94       	dec	r0
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	14 06       	cpc	r1, r20
 4a4:	05 06       	cpc	r0, r21
 4a6:	08 95       	ret

000004a8 <__fp_round>:
 4a8:	09 2e       	mov	r0, r25
 4aa:	03 94       	inc	r0
 4ac:	00 0c       	add	r0, r0
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <__fp_round+0xc>
 4b0:	88 23       	and	r24, r24
 4b2:	52 f0       	brmi	.+20     	; 0x4c8 <__fp_round+0x20>
 4b4:	bb 0f       	add	r27, r27
 4b6:	40 f4       	brcc	.+16     	; 0x4c8 <__fp_round+0x20>
 4b8:	bf 2b       	or	r27, r31
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <__fp_round+0x18>
 4bc:	60 ff       	sbrs	r22, 0
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__fp_round+0x20>
 4c0:	6f 5f       	subi	r22, 0xFF	; 255
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	08 95       	ret

000004ca <__fp_split3>:
 4ca:	57 fd       	sbrc	r21, 7
 4cc:	90 58       	subi	r25, 0x80	; 128
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	59 f0       	breq	.+22     	; 0x4ea <__fp_splitA+0x10>
 4d4:	5f 3f       	cpi	r21, 0xFF	; 255
 4d6:	71 f0       	breq	.+28     	; 0x4f4 <__fp_splitA+0x1a>
 4d8:	47 95       	ror	r20

000004da <__fp_splitA>:
 4da:	88 0f       	add	r24, r24
 4dc:	97 fb       	bst	r25, 7
 4de:	99 1f       	adc	r25, r25
 4e0:	61 f0       	breq	.+24     	; 0x4fa <__fp_splitA+0x20>
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	79 f0       	breq	.+30     	; 0x504 <__fp_splitA+0x2a>
 4e6:	87 95       	ror	r24
 4e8:	08 95       	ret
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	f2 cf       	rjmp	.-28     	; 0x4d8 <__fp_split3+0xe>
 4f4:	46 95       	lsr	r20
 4f6:	f1 df       	rcall	.-30     	; 0x4da <__fp_splitA>
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__fp_splitA+0x30>
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	99 1f       	adc	r25, r25
 502:	f1 cf       	rjmp	.-30     	; 0x4e6 <__fp_splitA+0xc>
 504:	86 95       	lsr	r24
 506:	71 05       	cpc	r23, r1
 508:	61 05       	cpc	r22, r1
 50a:	08 94       	sec
 50c:	08 95       	ret

0000050e <__fp_zero>:
 50e:	e8 94       	clt

00000510 <__fp_szero>:
 510:	bb 27       	eor	r27, r27
 512:	66 27       	eor	r22, r22
 514:	77 27       	eor	r23, r23
 516:	cb 01       	movw	r24, r22
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__mulsf3>:
 51c:	0e 94 a1 02 	call	0x542	; 0x542 <__mulsf3x>
 520:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_round>
 524:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_pscA>
 528:	38 f0       	brcs	.+14     	; 0x538 <__mulsf3+0x1c>
 52a:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_pscB>
 52e:	20 f0       	brcs	.+8      	; 0x538 <__mulsf3+0x1c>
 530:	95 23       	and	r25, r21
 532:	11 f0       	breq	.+4      	; 0x538 <__mulsf3+0x1c>
 534:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_inf>
 538:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_nan>
 53c:	11 24       	eor	r1, r1
 53e:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>

00000542 <__mulsf3x>:
 542:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_split3>
 546:	70 f3       	brcs	.-36     	; 0x524 <__mulsf3+0x8>

00000548 <__mulsf3_pse>:
 548:	95 9f       	mul	r25, r21
 54a:	c1 f3       	breq	.-16     	; 0x53c <__mulsf3+0x20>
 54c:	95 0f       	add	r25, r21
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	55 1f       	adc	r21, r21
 552:	62 9f       	mul	r22, r18
 554:	f0 01       	movw	r30, r0
 556:	72 9f       	mul	r23, r18
 558:	bb 27       	eor	r27, r27
 55a:	f0 0d       	add	r31, r0
 55c:	b1 1d       	adc	r27, r1
 55e:	63 9f       	mul	r22, r19
 560:	aa 27       	eor	r26, r26
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	aa 1f       	adc	r26, r26
 568:	64 9f       	mul	r22, r20
 56a:	66 27       	eor	r22, r22
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	66 1f       	adc	r22, r22
 572:	82 9f       	mul	r24, r18
 574:	22 27       	eor	r18, r18
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	62 1f       	adc	r22, r18
 57c:	73 9f       	mul	r23, r19
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	83 9f       	mul	r24, r19
 586:	a0 0d       	add	r26, r0
 588:	61 1d       	adc	r22, r1
 58a:	22 1f       	adc	r18, r18
 58c:	74 9f       	mul	r23, r20
 58e:	33 27       	eor	r19, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	23 1f       	adc	r18, r19
 596:	84 9f       	mul	r24, r20
 598:	60 0d       	add	r22, r0
 59a:	21 1d       	adc	r18, r1
 59c:	82 2f       	mov	r24, r18
 59e:	76 2f       	mov	r23, r22
 5a0:	6a 2f       	mov	r22, r26
 5a2:	11 24       	eor	r1, r1
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	9a f0       	brmi	.+38     	; 0x5d0 <__mulsf3_pse+0x88>
 5aa:	f1 f0       	breq	.+60     	; 0x5e8 <__mulsf3_pse+0xa0>
 5ac:	88 23       	and	r24, r24
 5ae:	4a f0       	brmi	.+18     	; 0x5c2 <__mulsf3_pse+0x7a>
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	bb 1f       	adc	r27, r27
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	91 50       	subi	r25, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__mulsf3_pse+0x64>
 5c2:	9e 3f       	cpi	r25, 0xFE	; 254
 5c4:	51 05       	cpc	r21, r1
 5c6:	80 f0       	brcs	.+32     	; 0x5e8 <__mulsf3_pse+0xa0>
 5c8:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_inf>
 5cc:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	e4 f3       	brlt	.-8      	; 0x5cc <__mulsf3_pse+0x84>
 5d4:	98 3e       	cpi	r25, 0xE8	; 232
 5d6:	d4 f3       	brlt	.-12     	; 0x5cc <__mulsf3_pse+0x84>
 5d8:	86 95       	lsr	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f7 95       	ror	r31
 5e2:	e7 95       	ror	r30
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	c1 f7       	brne	.-16     	; 0x5d8 <__mulsf3_pse+0x90>
 5e8:	fe 2b       	or	r31, r30
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__udivmodsi4>:
 5f6:	a1 e2       	ldi	r26, 0x21	; 33
 5f8:	1a 2e       	mov	r1, r26
 5fa:	aa 1b       	sub	r26, r26
 5fc:	bb 1b       	sub	r27, r27
 5fe:	fd 01       	movw	r30, r26
 600:	0d c0       	rjmp	.+26     	; 0x61c <__udivmodsi4_ep>

00000602 <__udivmodsi4_loop>:
 602:	aa 1f       	adc	r26, r26
 604:	bb 1f       	adc	r27, r27
 606:	ee 1f       	adc	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	a2 17       	cp	r26, r18
 60c:	b3 07       	cpc	r27, r19
 60e:	e4 07       	cpc	r30, r20
 610:	f5 07       	cpc	r31, r21
 612:	20 f0       	brcs	.+8      	; 0x61c <__udivmodsi4_ep>
 614:	a2 1b       	sub	r26, r18
 616:	b3 0b       	sbc	r27, r19
 618:	e4 0b       	sbc	r30, r20
 61a:	f5 0b       	sbc	r31, r21

0000061c <__udivmodsi4_ep>:
 61c:	66 1f       	adc	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	1a 94       	dec	r1
 626:	69 f7       	brne	.-38     	; 0x602 <__udivmodsi4_loop>
 628:	60 95       	com	r22
 62a:	70 95       	com	r23
 62c:	80 95       	com	r24
 62e:	90 95       	com	r25
 630:	9b 01       	movw	r18, r22
 632:	ac 01       	movw	r20, r24
 634:	bd 01       	movw	r22, r26
 636:	cf 01       	movw	r24, r30
 638:	08 95       	ret

0000063a <_exit>:
 63a:	f8 94       	cli

0000063c <__stop_program>:
 63c:	ff cf       	rjmp	.-2      	; 0x63c <__stop_program>
